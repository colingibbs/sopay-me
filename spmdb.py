from google.appengine.ext import db


class SPMUser(db.Model):

  google_account = db.UserProperty()
  # facebook_account = db.StringProperty()

  name = db.StringProperty()
  email = db.StringProperty()
  facebook_id = db.StringProperty()
  
  checkout_verified = db.BooleanProperty()
  checkout_last_sync = db.DateTimeProperty()
  checkout_merchant_id = db.StringProperty()
  checkout_merchant_secret = db.StringProperty()
  
  last_login = db.DateTimeProperty()

  def __str__(self):
    string = ''
    string += 'google_account           [' + strEmpty(self.google_account) + ']\n'
    string += 'name                     [' + strEmpty(self.name) + ']\n'
    string += 'email                    [' + strEmpty(self.email) + ']\n'
    string += 'facebook_id              [' + strEmpty(self.facebook_id) + ']\n'
    string += 'checkout_verified        [' + strEmpty(self.checkout_verified) + ']\n'
    string += 'checkout_last_sync       [' + strEmpty(self.checkout_last_sync) + ']\n'
    string += 'checkout_merchant_id     [' + strEmpty(self.checkout_merchant_id) + ']\n'
    if self.checkout_merchant_secret:
      text_secret = 'Present'
    else:
      text_secret = None
    string += 'checkout_merchant_secret [' + strEmpty(text_secret) + ']\n'
    string += 'last_login               [' + strEmpty(self.last_login) +  ']\n'
    return string


class PurchaseRecord(db.Model):

  # created using the seller SPMUser object as parent, also recorded here:
  SPMUser_seller = db.ReferenceProperty(
    reference_class = SPMUser,
    collection_name = 'seller_spmuid'
  )
  SPMUser_buyer = db.ReferenceProperty(
    reference_class = SPMUser,
    collection_name = 'buyer_spmuid'
  )
  SPMUser_sentto = db.ReferenceProperty(
    reference_class = SPMUser,
    collection_name = 'payer_spmuid'
  )

  # these are not required, since we sync non-sopayme things.  all three must
  # both be present for all sopayme-originating payments
  spm_name = db.StringProperty()
  spm_serial = db.IntegerProperty()
  spm_transaction = db.IntegerProperty()

  date_latest = db.DateTimeProperty()
  date_sent = db.DateTimeProperty()
  # date_accepted = db.DateTimeProperty()
  date_paid = db.DateTimeProperty()
  date_cancelled = db.DateTimeProperty() # used for refunding

  amount = db.StringProperty()
  currency = db.StringProperty()
  description = db.StringProperty()
  # sent to email is set when spm creates the record (OR) when the field is
  # empty and we get an email address from the checkout updates
  sent_to_email = db.StringProperty()

  # the following keep track of information that we get from checkout requests;
  # any information that is generated by this application is not kept in a
  # checkout_ prefixed field
  checkout_key = db.StringProperty()
  checkout_payurl = db.StringProperty()
  checkout_buyer_id = db.StringProperty()
  checkout_buyer_name = db.StringProperty()
  checkout_buyer_email = db.StringProperty()
  checkout_merchant_id = db.StringProperty()


class CountStore(db.Model):

  # created using 'fake' parent keyed off of spm_name
  url_count = db.IntegerProperty(required = True)


def strEmpty(string):
  if string:
    return str(string)
  else:
    return ''